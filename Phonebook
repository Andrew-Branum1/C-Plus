#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
/*
Author: Drew Branum
Date: 3/11/2020
Purpose: To create a phone book
Lab Section: 02
*/


	typedef struct Phonebook{//defined struct
		char FName[20];
		char LName[20];
		char PNumber[20];
	}Phonebook;
	
	void addF(Phonebook*,int*);
	void delF(Phonebook*,int*);
	void showB(Phonebook*,int*);
	void findF(Phonebook*, int*);
	void randE(Phonebook*, int*);
	void aBook(Phonebook*, int*);
	void cBook(Phonebook*, int*);
	void sBook(Phonebook*,int*);
	Phonebook* lBook(Phonebook*,int*);
	
	void sBook(Phonebook*Book, int*entries){
		int selection = -1;
		FILE *sFile;
		int num;
		char dub[100]={'\0'};
		
		do{
			printf("\nHello. Would you like to:\n1)Save to default destination\n2)Save to custom destination\n3)Cancel save\n");
			scanf("%d", &selection);
			switch(selection){
				case 1:
					{
						sFile=fopen("book.txt","w");
						if (sFile==NULL){
							printf("\nFile not opened!\n Returning to menu.");
							break;
							}
						for (num=0;num<=*entries-1;num++){
							fprintf(sFile,"%s\t%s\t%s\n",Book[num].FName,Book[num].LName,Book[num].PNumber);
							}
						fclose(sFile);
						printf("\nFile Saved to default directory.\n");
						break;
						
					}
				case 2:
					{
						printf("\nPlease input A directory to save file.\nInclude name and type at end of directory with no spaces");
						scanf("%s", &dub);
				
						sFile=fopen(dub,"w");
						if (sFile==NULL){
							printf("\nFile not opened\n Returning to menu.");
							break;
							}
						for (num=0;num<=*entries;num++){
							fprintf(sFile,"%d\t%s\t%s\t%s\n",num,Book[num].FName,Book[num].LName,Book[num].PNumber);
							}
						fclose(sFile);
						printf("\nFile Saved in %s!",dub);
						break;
					}
				case 0:
					{
						printf("\nSave Cancelled");
						break;
					}
				default:
					{
						printf("\ntry Again");
						selection=-1;
					}
						
			}
						
		}while(dub == -1);
	}
	
	Phonebook* lBook(Phonebook*Book,int * entries){
	FILE *sFile;
	int selection=-1;
	int num=1;
	char location[100]={'\0'};
	do
	{
		printf("\nChoose Location to Load File:\n1) Default Location\n2) Specified Location\n0)Cancel Load\n");	
		scanf("%d",&selection);
		if (selection==1||selection==2)
		{
			*entries=0;
			Book = (Phonebook*)realloc(Book,(sizeof(entries)));
		}
		
		switch(selection)
	{
		case 1:
			{
				sFile=fopen("book.txt","r");
				if (sFile==NULL)
				{
					printf("\nFile not opened\n Returning to menu.");
					break;
				}
				
				while (!feof(sFile))
				{
					
					*entries=(*entries)+1;
					Book = realloc(Book, (sizeof(Phonebook)*(*entries+1)));
					if (Book==NULL)
					{
						printf("\nFailed");
					}
					fscanf(sFile,"%s\t%s\t%s\n",Book[(*entries)-1].FName,Book[(*entries)-1].LName,Book[(*entries)-1].PNumber);													
				}								
				fclose(sFile);				
				printf("\nBook Loaded from Default\n");				
				break;
			}
		case 2:
			{
				printf("\nPlease input directory to load file.\nInclude name and type at end of directory without spaces");
				scanf("%s",location);
				
				sFile=fopen(location,"r");
				if (sFile==NULL)
				{
					printf("\nFile not opened\n Returning to menu.");
					break;
				}
				while (!feof(sFile))
				{
					
					*entries=(*entries)+1;
					Book = realloc(Book, (sizeof(Phonebook)*(*entries+1)));
					if (Book==NULL)
					{
						printf("\nFailed");
					}
					fscanf(sFile,"%s\t%s\t%s\n",Book[(*entries)-1].FName,Book[(*entries)-1].LName,Book[(*entries)-1].PNumber);													
				}
				fclose(sFile);
				printf("\nFile Loaded from %s!",location);
				break;
				
				
			}
		case 0:
			{
				printf("\nLoad Cancelled!");
				break;
			}
		default:
			{
				printf("\nTry again");
				selection=-1;
			}
		
		
		
		
		}
	}while(selection==-1);
	
	return Book;
}
	
	void showB(Phonebook*Book,int*entries){//show Phonebook function
		int num;
		for(num=1;num<=*entries;num++){
			printf("\nEntry Number: %d\nFirst Name:\t%s\nLast Name:\t%s\nPhone Number:\t%s\n",num,Book[num].FName,Book[num].LName,Book[num].PNumber);
			
		}
	}
	
	void addF(Phonebook*Book,int*entries){//add to Phonebook function
		if(*entries==0){
			Book = (Phonebook*)realloc(Book, (sizeof(Phonebook)*2));
		}
		else {
			Book = (Phonebook*)realloc(Book,(sizeof(Phonebook)*(*entries))+sizeof(Phonebook));
		}
		if(Book != NULL){
			printf("\nEntry Number: %d",*entries);
			printf("\nFirst Name: ");
			scanf("%s",Book[*entries].FName);
			printf("\nLast Name: ");
			scanf("%s",Book[*entries].LName);
			printf("\nPhone Number (Format: xxx-xxxx): ");
			scanf("%s",Book[*entries].PNumber);
		}
		else{
			printf("Not enough memory.\n");
		}
	
	}
void delF(Phonebook*Book,int*entries){//delete contact function
	int num;
	int delNum;
	char tempFName[15]={'\0'};
	char tempLName[15]={'\0'};
	char tempPhone[15]={'\0'};
	int selection=0;
	printf("The program is case sensitive\n");
	printf("\nFirst Name: \n");
	scanf("%s",tempFName);
	printf("\nLast Name: \n");
	scanf("%s",tempLName);
	for(num=0;num<=*entries+1;num++)
	{
		if (strcmp(tempFName,Book[num].FName)==0&&strcmp(tempLName,Book[num].LName)==0)
		{
			delNum=num;
			printf("\nDelete Entry Number:%d\nFirst Name:\t%s\nLast Name:\t%s\nPhone Number:\t%s\n",num,Book[num].FName,Book[num].LName,Book[num].PNumber);
			printf("\n\n[1]\tYes\n[2]\tNo\n: ");
			scanf("%d",&selection);
			switch(selection)
			{
				case 1:
					{
						for(num=delNum+1;num<=*entries+1;num++)//Shift all entries after deleted entry up
						{
							strcpy(Book[num-1].FName,Book[num].FName);
							strcpy(Book[num-1].LName,Book[num].LName);
							strcpy(Book[num-1].PNumber,Book[num].PNumber);
							
						}
						*entries=*entries-1;
							
						if (*entries!=0)
						{				
						Book = (Phonebook*)realloc(Book, (sizeof(Phonebook)*(*entries+1)));
						
						}
						else if (entries>0)
						{
							Book = (Phonebook*)realloc(Book, 2*(sizeof(Phonebook)));
						}
						break;
					}
				case 2:
					{
						printf("\nDeletion Cancelled!\n");
						break;
					}
			}
			break;
			
		}
		else if (num>*entries)
		{
			printf("\nNo matching entry found! The program is case sensitive so check caps lock!\n");
		}
	}
	
}
void findF(Phonebook*Book,int * entries)
{
	int num;
	int delNum;
	char tempFName[15]={'\0'};
	char tempLName[15]={'\0'};
	
	
	printf("\nFirst Name: ");
	scanf("%s",tempFName);
	printf("\nLast Name: ");
	scanf("%s",tempLName);
	for(num=0;num<=*entries+1;num++)
	{
		if (strcmp(tempFName,Book[num].FName)==0&&strcmp(tempLName,Book[num].LName)==0)
		{
			delNum=num;
			printf("\n\n\nEntry Number:%d\nFirst Name:\t%s\nLast Name:\t%s\nPhone Number:\t%s\n\n\n",num,Book[num].FName,Book[num].LName,Book[num].PNumber);
			break;		
			
		}
		else if (num>*entries)
		{
			printf("No entry found!");
			
		}
	}
	
}

void randE(Phonebook*Book,int * entries)
{
	srand(time(NULL));
	int num;
	num=(rand()%(*entries))+1;
	printf("\n\n\nEntry Number:%d\nFirst Name:\t%s\nLast Name:\t%s\nPhone Number:\t%s\n\n\n",num,Book[num].FName,Book[num].LName,Book[num].PNumber);
}

void cBook(Phonebook*Book,int * entries)
{
	*entries=0;
	Book = (Phonebook*)realloc(Book, (sizeof(Phonebook)*(*entries+1)));
	printf("\nDeleted...\n");	

}

void aBook(Phonebook*Book,int * entries)
{
	Phonebook * aBook;
	aBook=(Phonebook*)malloc(sizeof(Phonebook)*(*entries+1)*2);
	int num;
	int num2;
	int aCount=0;
	int num3;
	for (num=1;num<=*entries;num)
	{
		
		aCount=0;
		for (num2=1;num2<=*entries;num2)
		{
			
			if(strcmp(Book[num].FName,Book[num2].FName)<0)
			{
			 	aCount=aCount+1;
			 	
			}
			
		 num2=num2+1;
		}
		num3=(*entries)-aCount;
		strcpy(aBook[num3].FName,Book[num].FName);
		strcpy(aBook[num3].LName,Book[num].LName);
		strcpy(aBook[num3].PNumber,Book[num].PNumber);
		num=num+1;
	}
	for (num=1;num<=*entries;num++)
	{
		printf("\nEntry Number: %d\nFirst Name:\t%s\nLast Name:\t%s\nPhone Number:\t%s\n",num,aBook[num].FName,aBook[num].LName,aBook[num].PNumber);
	}
	free (aBook);
	
	
}


int main(int argc, char *argv[]) {//main
	
	int select;
	int entries = 0;
	Phonebook *Book;
	Book = (Phonebook*)malloc(sizeof(Phonebook));
	do{//menu
	printf("Hello and welcome to your own personal phonebook\n\n");
	printf("1) Add Contact\n\n");
	printf("2) Delete Contact\n\n");
	printf("3) Display Contacts\n\n");
	printf("4) Find Contact\n\n");
	printf("5) Random Contact\n\n");
	printf("6) Alphabetize Contacts\n\n");
	printf("7) Delete All Contacts\n\n");
	printf("8) Save All Contacts\n\n");
	printf("9) Load Contacts\n\n");
	printf("0) Exit\n\n");
	scanf("%d", &select);
	
	switch(select){
	
		case(1):
			printf("\nYou have selected Add Contact\n");
			entries++;
			addF(Book,&entries);
			
			break;
		case(2):
			printf("\nYou have selected Delete Contact\n");
			delF(Book,&entries);
			
			break;
		case(3):
			printf("\nContact Entries:\n\n");
			showB(Book,&entries);
			break;
		case 4:
			{
			 printf("\nYou have selected \"Search Phone Book\".");
			 findF(Book,&entries);
			 
				break;
			}
		case 5:
			{
			 printf("\nYou have selected \"Random Entry\".");
			 randE(Book,&entries);
			 
			 break;
			}
		case 6:
			{
			 printf("\nYou have selected \"Alphabetical Phone Book\".");
			 aBook(Book,&entries);
			 
			 break;
				
			}	
		case 7:
			{
			 printf("\nYou have selected \"Clear Phone Book\".");
			 cBook(Book,&entries);
			 
			 break;
				
			}
		case 8:
			{
			 printf("\nYou have selected \"Save All Contacts\".");
			 sBook(Book, &entries);
			 
			 break;
			}
		case 9:
			{
			 printf("\n You have selected \"Load Contacts\".");
			 lBook(Book, &entries);
			 
			 break;
			}
		case 0:
			{
			 printf("\nYou have selected \"Exit\".");
			 printf("\nHave a nice day!");
			 free(Book);
			 break;
			}
		default:
			{
				printf("\nPlease choose a valid option.");
				break;
			}
	}
	}while (select != 0);
	
	return 0;
}
